/* Main.ino file generated by New Project wizard

   Created:   Thu Sep 5 2013
   Processor: ATmega2560
   Compiler:  Arduino AVR
*/

/*
  Dots Data: IO22 - IO27
  Cell Enable: I06, I07, I08, IO9
*/

const byte brailleDot[6] = {
  22, 23, 24, 25, 26, 27
};

const byte cellEnable[] = {
  6, 7, 8, 9
};

#define nCells 4
#define nDots 6
#define nextLinePin 2

// binary Braille Dot patters for ASCII from 32 to 122
// https://create.arduino.cc/projecthub/CesareBrizio/ascii-braille-real-time-translation-via-arduino-dd97a9
byte brailleCodes[] = {
  0,    14,   7,    2,    15,   15,   8,    13,
  28,   32,   40,   48,   52,   36,   56,   60,
  44,   24,   12,   10,   11,   32,   40,   48,
  52,   36,   56,   60,   44,   24,   28,   34,
  42,   50,   54,   38,   58,   62,   46,   26,
  30,   35,   43,   29,   51,   55,   39,   32,
  40,   48,   52,   36,   56,   60,   44,   24,
  28,   34,   42,   50,   54,   38,   58,   62,
  46,   26,   30,   35,   43,   29,   51,   55,
  39
};

byte asciiCodes[] = {
  32,   33,   34,   34,   40,   41,   44,   46,
  48,   49,   50,   51,   52,   53,   54,   55,
  56,   57,   58,   59,   63,   65,   66,   67,
  68,   69,   70,   71,   72,   73,   74,   75,
  76,   77,   78,   79,   80,   81,   82,   83,
  84,   85,   86,   87,   88,   89,   90,   97,
  98,   99,   100,  101,  102,  103,  104,  105,
  106,  107,  108,  109,  110,  111,  112,  113,
  114,  115,  116,  117,  118,  119,  120,  121,
  122
};

byte ascii2Braille[255];
volatile boolean nextLine = false;
boolean t = false;
static unsigned long last_interrupt_time = 0;

String textEng = "aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz";

String inputString = "";         // a String to hold incoming data
boolean stringComplete = false;  // whether the string is complete

void setup()
{
  // put your setup code here, to run once:
  for (byte i = 0; i < nDots; i++)
    pinMode(brailleDot[i], 1);
  for (byte i = 0; i < nCells; i++)
    pinMode(cellEnable[i], 1);

  for (byte i = 0; i < 73; i++) {
    ascii2Braille[asciiCodes[i]] = brailleCodes[i];
  }
  Serial.begin(115200);
  pinMode(nextLinePin, INPUT_PULLUP);
  pinMode(LED_BUILTIN, OUTPUT);
  attachInterrupt(digitalPinToInterrupt(nextLinePin), ISRNextLine, FALLING);
  clearBraille();
}

void loop() {
  byte l = textEng.length();
  for (byte i = 0; i < l;) {
    for (byte j = 0; j < nCells && i < l; j++) {
      byte c = textEng.charAt(i);
      if (isDigit(c)) {
        writeBraille(j++, 0b00010111);
      }
      writeBraille(j, ascii2Braille[c]);
      Serial.print(char(c));
      i++;
    }
    //delay(1000);
    while (!nextLine);
    nextLine = false;
    clearBraille();
    Serial.println();
  }
  //getSerialData();
}

void clearBraille() {
  for (byte j = 0; j < nCells; j++) {
    writeBraille(j, 0x00);
  }
}

void writeBraille(byte cellID, byte brailleCode) {
  digitalWrite(cellEnable[cellID], 1);
  for (int i = 0; i < nDots; i++) {
    digitalWrite(brailleDot[i], brailleCode >> i & 0x01);
  }
  digitalWrite(cellEnable[cellID], 0);
}

void ISRNextLine() {
  unsigned long interrupt_time = millis();
  if (interrupt_time - last_interrupt_time > 500)
    nextLine = true;
  last_interrupt_time = interrupt_time;
}

void getSerialData() {
  while (Serial.available()) {
    digitalWrite(LED_BUILTIN, t);
    t = !t;
    char inChar = (char)Serial.read();
    if (inChar == 0x0D) {
      textEng = inputString;
      inputString = "";
    }
    else {
      inputString += inChar;
    }
  }
}
